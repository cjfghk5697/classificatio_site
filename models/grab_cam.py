# -*- coding: utf-8 -*-
"""Grab CAM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YPTWu5W85BBlZ7YdsFs8s4sQ3lbo9TmL
"""

!pip install grad-cam

from pytorch_grad_cam import GradCAM
from pytorch_grad_cam.utils.model_targets import ClassifierOutputTarget
from pytorch_grad_cam.utils.image import show_cam_on_image
import torchvision
import torch
import cv2
import matplotlib.pyplot as plt
from PIL import Image
from torch import nn
from torchvision.models import mobilenet_v2

def get_img_tensor(img_path):
    img = cv2.imread(img_path)
    img = Image.fromarray(img)
    img = torchvision.transforms.Resize((256, 256))(img)
    img = torchvision.transforms.ToTensor()(img)
    img = torchvision.transforms.Normalize(mean = (0.485, 0.456, 0.406), std = (0.229, 0.224, 0.225))(img)
    img = img.unsqueeze(0)
    return img

class Network(nn.Module):
    def __init__(self):
        super(Network, self).__init__()
        self.model = mobilenet_v2(pretrained=True)

    def forward(self, x):
        x = self.model(x)

        return x

device = torch.device('cuda')
model = Network().to(device)
model.load_state_dict(torch.load("/content/drive/MyDrive/input/model/mobilev2.pth",map_location=device) ,strict=False)

target_layers = [model.model.features[-1]]
cam = GradCAM(model=model, target_layers=target_layers, use_cuda=False)

img_path = "/content/drive/MyDrive/input/train/10001.png"
img = get_img_tensor(img_path).to(device)
image = cv2.imread(img_path, cv2.IMREAD_COLOR)

image = cv2.normalize(image, None, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX, dtype=cv2.CV_32F)

image=cv2.resize(image, dsize=(256, 256))

pred = int(torch.argmax(torch.nn.Softmax()(model(img))).item())
targets = [ClassifierOutputTarget(pred)]

grayscale_cam = cam(input_tensor=img, targets=targets)
grayscale_cam = grayscale_cam[0, :]
visualization = show_cam_on_image(image, grayscale_cam, use_rgb=True)
plt.imshow(visualization)